//Develop a Banking System in Java with abstraction and interfaces for security and flexibility.
//Implement SavingsAccount and CheckingAccount classes adhering to the BankingAccount interface.
//Allow users to create accounts, deposit, withdraw, transfer funds, and view transactions.



import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
 
interface BankingAccount {
    void deposit(double amount);
    void withdraw(double amount);
    void transfer(double amount, BankingAccount toAccount);
    void viewTransactions();
    double getBalance();
    String getAccountNumber();
}
 
abstract class Account implements BankingAccount {
    private String accountNumber;
    private double balance;
    private List<String> transactions;
 
    public Account(String accountNumber, double initialDeposit) {
        this.accountNumber = accountNumber;
        this.balance = initialDeposit;
        this.transactions = new ArrayList<>();
        transactions.add("Initial deposit: $" + initialDeposit);
    }
 
    @Override
    public void deposit(double amount) {
        balance += amount;
        transactions.add("Deposit: $" + amount);
    }
 
    @Override
    public void withdraw(double amount) {
        if (amount <= balance) {
            balance -= amount;
            transactions.add("Withdrawal: $" + amount);
        } else {
            System.out.println("Insufficient funds.");
        }
    }
 
    @Override
    public void transfer(double amount, BankingAccount toAccount) {
        if (amount <= balance) {
            balance -= amount;
            toAccount.deposit(amount);
            transactions.add("Transfer to Account " + toAccount.getAccountNumber() + ": $" + amount);
        } else {
            System.out.println("Insufficient funds.");
        }
    }
 
    @Override
    public void viewTransactions() {
        System.out.println("Transaction History for Account " + accountNumber + ":");
        for (String transaction : transactions) {
            System.out.println(transaction);
        }
    }
 
    @Override
    public double getBalance() {
        return balance;
    }
 
    @Override
    public String getAccountNumber() {
        return accountNumber;
    }
}
 
class SavingsAccount extends Account {
    public SavingsAccount(String accountNumber, double initialDeposit) {
        super(accountNumber, initialDeposit);
    }
}
 
class CheckingAccount extends Account {
    public CheckingAccount(String accountNumber, double initialDeposit) {
        super(accountNumber, initialDeposit);
    }
}
 
public class BankingSystem20 {
    private static Map<String, BankingAccount> accounts = new HashMap<>();
    private static int accountCounter = 123456789;
 
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        while (true) {
            System.out.println("1. Create Account");
            System.out.println("2. Deposit");
            System.out.println("3. Withdraw");
            System.out.println("4. Transfer Funds");
            System.out.println("5. View Transactions");
            System.out.println("6. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            switch (choice) {
                case 1:
                    createAccount(scanner);
                    break;
                case 2:
                    deposit(scanner);
                    break;
                case 3:
                    withdraw(scanner);
                    break;
                case 4:
                    transferFunds(scanner);
                    break;
                case 5:
                    viewTransactions(scanner);
                    break;
                case 6:
                    System.out.println("Exiting...");
                    return;
                default:
                    System.out.println("Invalid choice. Try again.");
            }
        }
    }
 
    private static void createAccount(Scanner scanner) {
        System.out.print("Enter account type (Savings/Checking): ");
        String type = scanner.next();
        System.out.print("Enter initial deposit amount: ");
        double initialDeposit = scanner.nextDouble();
        String accountNumber = String.valueOf(accountCounter++);
        BankingAccount account;
        if (type.equalsIgnoreCase("Savings")) {
            account = new SavingsAccount(accountNumber, initialDeposit);
        } else if (type.equalsIgnoreCase("Checking")) {
            account = new CheckingAccount(accountNumber, initialDeposit);
        } else {
            System.out.println("Invalid account type.");
            return;
        }
        accounts.put(accountNumber, account);
        System.out.println("Account created successfully! Account Number: " + accountNumber);
    }
 
    private static void deposit(Scanner scanner) {
        System.out.print("Enter account number: ");
        String accountNumber = scanner.next();
        BankingAccount account = accounts.get(accountNumber);
        if (account != null) {
            System.out.print("Enter deposit amount: ");
            double amount = scanner.nextDouble();
            account.deposit(amount);
            System.out.println("Deposit successful. New balance: $" + account.getBalance());
        } else {
            System.out.println("Account not found.");
        }
    }
 
    private static void withdraw(Scanner scanner) {
        System.out.print("Enter account number: ");
        String accountNumber = scanner.next();
        BankingAccount account = accounts.get(accountNumber);
        if (account != null) {
            System.out.print("Enter withdrawal amount: ");
            double amount = scanner.nextDouble();
            account.withdraw(amount);
            System.out.println("Withdrawal successful. New balance: $" + account.getBalance());
        } else {
            System.out.println("Account not found.");
        }
    }
 
    private static void transferFunds(Scanner scanner) {
        System.out.print("Enter your account number: ");
        String fromAccountNumber = scanner.next();
        BankingAccount fromAccount = accounts.get(fromAccountNumber);
        if (fromAccount != null) {
            System.out.print("Enter the recipient's account number: ");
            String toAccountNumber = scanner.next();
            BankingAccount toAccount = accounts.get(toAccountNumber);
            if (toAccount != null) {
                System.out.print("Enter transfer amount: ");
                double amount = scanner.nextDouble();
                fromAccount.transfer(amount, toAccount);
                System.out.println("Transfer successful.");
            } else {
                System.out.println("Recipient account not found.");
            }
        } else {
            System.out.println("Your account not found.");
        }
    }
 
    private static void viewTransactions(Scanner scanner) {
        System.out.print("Enter account number: ");
        String accountNumber = scanner.next();
        BankingAccount account = accounts.get(accountNumber);
        if (account != null) {
            account.viewTransactions();
        } else {
            System.out.println("Account not found.");
        }
    }
}
 
